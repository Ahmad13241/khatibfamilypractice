# Khatib Family Practice - Netlify Configuration File

[build]
  publish = "dist"
  command = """
    echo "==== Creating minimal build script ===="
    cat > build-netlify.js << 'EOL'
    const fs = require('fs');
    const path = require('path');
    const { execSync } = require('child_process');
    
    console.log('Starting simplified build process...');
    
    // Create dist directory
    const distDir = path.join(__dirname, 'dist');
    if (!fs.existsSync(distDir)) {
      fs.mkdirSync(distDir, { recursive: true });
    }
    
    // Copy all static assets to dist
    console.log('Copying static files...');
    ['css', 'images', 'js', 'pages'].forEach(dir => {
      if (fs.existsSync(dir)) {
        execSync(`mkdir -p dist/${dir} && cp -R ${dir}/* dist/${dir}/`);
        console.log(`Copied ${dir} files`);
      }
    });
    
    // Copy index.html and other root files
    const rootFiles = ['index.html', 'favicon.ico'];
    rootFiles.forEach(file => {
      if (fs.existsSync(file)) {
        fs.copyFileSync(file, path.join(distDir, file));
        console.log(`Copied ${file}`);
      }
    });
    
    // Create server.js for production
    const prodServerPath = path.join(distDir, 'server.js');
    const prodServerContent = `const express = require('express');
    const cors = require('cors');
    const bodyParser = require('body-parser');
    const path = require('path');
    const morgan = require('morgan');
    
    const app = express();
    const PORT = process.env.PORT || 3000;
    
    app.use(morgan('combined'));
    app.use(cors());
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({ extended: false }));
    
    app.use(express.static(path.join(__dirname)));
    
    app.post('/api/contact', (req, res) => {
      console.log('Contact form submission received');
      res.status(200).json({ success: true, message: 'Form submitted successfully' });
    });
    
    app.use((err, req, res, next) => {
      console.error('Server Error:', err.message);
      res.status(500).send('An error occurred. Please try again later.');
    });
    
    app.listen(PORT, () => {
      console.log(\`Khatib Family Practice server running on port \${PORT}\`);
    });`;
    
    fs.writeFileSync(prodServerPath, prodServerContent);
    console.log('Created production server.js');
    
    // Create production package.json
    const prodPackagePath = path.join(distDir, 'package.json');
    const prodPackageContent = {
      name: 'khatib-family-practice',
      version: '1.0.0',
      description: 'Khatib Family Practice Website',
      main: 'server.js',
      scripts: {
        start: 'node server.js'
      },
      dependencies: {
        'body-parser': '^1.20.2',
        'cors': '^2.8.5',
        'express': '^4.18.2',
        'morgan': '^1.10.0'
      }
    };
    
    fs.writeFileSync(prodPackagePath, JSON.stringify(prodPackageContent, null, 2));
    console.log('Created production package.json');
    
    console.log('Build completed successfully!');
    EOL
    
    echo "==== Running simplified build script ===="
    node build-netlify.js
  """
  
[build.environment]
  # Updated Node version for compatibility
  NODE_VERSION = "18.18.0"

# Enable HTTPS and ensure redirect from HTTP to HTTPS
[[redirects]]
  from = "http://*"
  to = "https://:splat"
  status = 301
  force = true

# Handle PDF forms downloads correctly
[[headers]]
  for = "/forms/*"
    [headers.values]
    Content-Type = "application/pdf"
    Content-Disposition = "attachment"
    Cache-Control = "public, max-age=86400"

# Security headers for all pages
[[headers]]
  for = "/*"
    [headers.values]
    X-Content-Type-Options = "nosniff"
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Permissions-Policy = "camera=(), microphone=(), geolocation=()"
    Content-Security-Policy = "default-src 'self'; script-src 'self' https://cdnjs.cloudflare.com https://ajax.googleapis.com; style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://fonts.googleapis.com; img-src 'self' data: https://maps.google.com https://maps.gstatic.com; font-src 'self' https://cdnjs.cloudflare.com https://fonts.gstatic.com; connect-src 'self'; frame-src https://www.google.com https://healow.com; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none'"

# Cache static assets
[[headers]]
  for = "/*.css"
    [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "/*.js"
    [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "/images/*"
    [headers.values]
    Cache-Control = "public, max-age=604800"

# Enable Forms handling
[build.processing.html]
  pretty_urls = true

# Core plugins - only include essential ones initially
[[plugins]]
  package = "@netlify/plugin-sitemap"
  [plugins.inputs]
    baseUrl = "https://khatibfamilypractice.com"
    exclude = ['/thank-you']

# These plugins may be added back once basic build is successful
# [[plugins]]
#   package = "@netlify/plugin-lighthouse"
#   [plugins.inputs]
#     output_path = "reports/lighthouse.html"

# [[plugins]]
#   package = "netlify-plugin-inline-critical-css"

# [[plugins]]
#   package = "netlify-plugin-image-optim"

# [[plugins]]
#   package = "netlify-plugin-no-more-404"
#   [plugins.inputs]
#     on404 = "error"

# Define environment variables
[context.production.environment]
  NODE_ENV = "production"

[context.deploy-preview.environment]
  NODE_ENV = "development"
